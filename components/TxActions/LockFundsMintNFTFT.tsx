import React, {useEffect, useState } from 'react';
import type { NextComponentType, NextPageContext } from "next";
import { Transaction, Asset, ForgeScript } from '@meshsdk/core';
import { resolveDataHash } from '@meshsdk/core';
import type { Data } from '@meshsdk/core';
import { BrowserWallet } from '@meshsdk/core';
import {Card, Button} from '@web3uikit/core';
import { useLovelace } from '@meshsdk/react';
import { Action, PlutusScript } from '@meshsdk/core';
import { AssetMetadata, Mint } from '@meshsdk/core';

// Added window in scope for cardano component.
declare const window: any;

// Lock Script Address in Preprod Testnet (this is the contract I coded named LockScriptV2 in the backend associated repo)
const lockScriptAddress = 'addr_test1wrgzpjxkl3249pfsjgmv7mueautkt28kgx2xhehjqhxanecznac34'

// NOW. With Mesh we construct it in the following way.

const datumConstructor: Data = {
    alternative: 0,
    fields: [100000000, '85d4ddf3ab7b5711afc2324077b49f6c6efd9bd71dd4c63267e13d93'],
  };

// We also need a 'REDEEMER' for minting assets
// Think of this as the --redeemer-value-file unit.json that we include in the cardano-cli tx when minting assets.


const redeemerStructure: Data = {
        alternative: 0,
        fields: []

}
const redeemer: Partial<Action> = {
    tag: 'MINT',
    data: redeemerStructure
  }

const redeemerTwoStruct: Data = {
    alternative: 0,
    fields: []

}
const redeemerTwo: Partial<Action> = {
    tag: 'MINT',
    data: redeemerTwoStruct
  }

// Token 1. NFT for identification

const nftAsset: Mint = {
    assetName: 'LockNFT',
    assetQuantity: '1',
    recipient: 'addr_test1qpyfg6h3hw8ffqpf36xd73700mkhzk2k7k4aam5jeg9zdmj6k4p34kjxrlgugcktj6hzp3r8es2nv3lv3quyk5nmhtqqexpysh',
    metadata: '',
    label: '721'
  }

  // Used the following to serialize the parameterised NFT policy

//   NFTIdent.writeSerialisedScript  (Utils.unsafeReadTxOutRef $ "969798dbfe9af3662d2fb016425792e207f8f440c6926ac58f26b573526968d2#1") (Utils.unsafeReadAddress $ "addr_test1wrgzpjxkl3249pfsjgmv7mueautkt28kgx2xhehjqhxanecznac34")
//   WHich is a TxOutRef from one of the NAmi wallet utxos
// with policyID 4e3bc9c04d5d49e2d53a58838fdd235db3588ec53ac37d672f7c326f
// EVERY TIME YOU MINT, make sure you serialize  script again using a utxo that has enough ada.
// and then update the nftScriptSerial here
const nftScriptSerial : string = "590b87590b84010000333232323233223232323232323232323233223232323232323232323232323232323232323222335501022232325335330053333573466e1cd55ce9baa0044800080ac8c98c80accd5ce0160158149999ab9a3370e6aae7540092000233221233001003002323232323232323232323232323333573466e1cd55cea8062400046666666666664444444444442466666666666600201a01801601401201000e00c00a00800600466a04a04c6ae854030cd4094098d5d0a80599a8128139aba1500a3335502975ca0506ae854024ccd540a5d728141aba1500833502503135742a00e666aa052064eb4d5d0a8031919191999ab9a3370e6aae75400920002332212330010030023232323333573466e1cd55cea8012400046644246600200600466a078eb4d5d0a801181e9aba135744a004464c6408266ae701081040fc4d55cf280089baa00135742a0046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40f1d69aba15002303d357426ae8940088c98c8104cd5ce02102081f89aab9e5001137540026ae84d5d1280111931901e99ab9c03e03d03b135573ca00226ea8004d5d0a80299a812bae35742a008666aa05205c40026ae85400cccd540a5d710009aba150023030357426ae8940088c98c80e4cd5ce01d01c81b89aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226aae7940044dd50009aba150023020357426ae8940088c98c80accd5ce016015814881509a804a4810350543500135573ca00226ea800488c8cc038cc019241154e6f7420656e6f75676820414441204c6f636b656400533533550133355500d00823500122220033253350011350084901035054380022100233500b2323500122350082232335005233500425335333573466e3c0080040bc0b85400c40b880b88cd401080b894cd4ccd5cd19b8f00200102f02e15003102e153350032153350022133500223350022335002233500223301e00200120312335002203123301e00200122203122233500420312225335333573466e1c01800c0d00cc54cd4ccd5cd19b8700500203403313301f00400110331033102c153350012102c102c350012222004323500122222222222200a500110252213500222253350041333573466e20005208087a70e02a02b22102c3300e3300649011357726f6e6720616d6f756e74206d696e74656400533533500b3355500d23301300135003223333500123263202c335738921024c680002c200123263202c3357389201024c680002c23263202c3357389201024c680002c2350012200233550133355500d335501355300f12001235001222335501f00300100832350012222222222220085001102522135002225335003133015001480088840accc01924010e5554584f206e6f742074686572650033355301012001323212330012233350052200200200100235001220011233001225335002102910010262325335333573466e3cd400488008d401c880080a009c4ccd5cd19b873500122001350072200102802710273500122002323500122222222222200c500113500122002225335001102213357380040422464c6404466ae700040888cc009404c004c8004d540848894cd40044008884d400888cc01cccc02000801800400cc8004d5408088894cd40044008884d4008894cd4ccd5cd19b870014800009008c4ccc02001c01800c4ccc02001ccd405c48ccc00402000c00801800c48cd54c00848004894cd4c00c0084cd404400800440054040c8004d5407888448894cd40044008884cc014008ccd54c01c48004014010004444888c00cc008004894cd400840044064c8004d5406c8844894cd40045403c884cd4040c010008cd54c01848004010004c8004d5406888448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000488ccd5cd19b8700200101701622333573466e3c0080040580544488c00800448c88c008dd6000990009aa80b911999aab9f0012500a233500930043574200460066ae8800805c8c8c8cccd5cd19b8735573aa004900011991091980080180118069aba150023005357426ae8940088c98c805ccd5ce00c00b80a89aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180b1aba15002335010015357426ae8940088c98c8070cd5ce00e80e00d09aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403c66ae7007c07807006c0684d55cea80089baa00135742a00466a018eb8d5d09aba2500223263201833573803203002c26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355014223233335573e0044a010466a00e66aa012600c6aae754008c014d55cf280118021aba20030151357420022244004244244660020080062244246600200600424464646666ae68cdc3a800a40004642446004006600a6ae84d55cf280191999ab9a3370ea0049001109100091931900919ab9c01301201000f135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900919ab9c01301201000f00e00d135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900719ab9c00f00e00c135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8030cd5ce00680600509baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8054cd5ce00b00a80980900880800780700689aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401c66ae7003c03803002c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200b33573801801601201026aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401866ae700340300280240204d55cea80089baa0012323333573466e1d40052002200523333573466e1d40092000200523263200833573801201000c00a26aae74dd5000891001091000a4c2400292103505431001123230010012233003300200200133512233002488120f5f8b29457d6a37a4068bf2b4a497e4fc346043679eb94bc6da84547dd35cbc000480108848cc00400c0088004ccd4488944ccd44888cd4488cc008c0112211cd020c8d6fc555285309236cf6f99ef1765a8f641946be6f205cdd9e70050072212330010030022001212230020032122300100320011212230020031122001120011"


// Token. 2 Utility token , its amount is based on the 1:10 ADA ratio that is locked from the user. FOr every 10 ada user locks, can mint 1 utility token.


const utilityToken: Mint = {
    assetName: 'WizardToken',
    // the amount is fixed here, but the realistic scenario shoud be taking user input from a form type.
    assetQuantity: '666666',
    recipient: 'addr_test1qpyfg6h3hw8ffqpf36xd73700mkhzk2k7k4aam5jeg9zdmj6k4p34kjxrlgugcktj6hzp3r8es2nv3lv3quyk5nmhtqqexpysh',
    metadata: '',
    label: '20'
  }

// Serialized with the LockFUnds script address, as a paratemer
// 
const utilitySerial: string = "590b17590b14010000332323232332232323232323232323232323322323232323232323232323232323222232325335332232533553355335300b3533530101200133355300a120012253353235001223500d2232335005233500425335333573466e3c0080040bc0b85400c40b880b88cd401080b894cd4ccd5cd19b8f00200102f02e15003102e153350032153350022133500223350022335002233500223301b00200120312335002203123301b00200122203122233500420312225335333573466e1c01800c0d00cc54cd4ccd5cd19b870050020340331333573466e1c0100040d00cc40cc40cc40b054cd4004840b040b0d400888880104cd406400800440054060d540048888888888880292000222200310242213500222253350041333573466e20cdc1800a4028a66a66aa60282400246a00244002666aa601e2400244a66a6602a6a004440046020012266a03c0040022002a03a66aa60282400205860206aa00c44444444444401026a02c9201035054380022100202902a22102b102513357389211d6e6f7420636f7272656374204144413a3a544f4b454e20726174696f6e0002415335533533355300a120012253355335330103500222002300b004102610271335019002001100150183355300f12001027300b3550012222222222220081024221350022253350031333573466e1c005200202902822102a1025133573892010d4e6f74204e465420666f756e64000241024135001220023333573466e1cd55ce9baa0044800080848c98c8084cd5ce01201080f9999ab9a3370e6aae7540092000233221233001003002323232323232323232323232323333573466e1cd55cea8062400046666666666664444444444442466666666666600201a01801601401201000e00c00a00800600466a03c03e6ae854030cd407807cd5d0a80599a80f0101aba1500a3335502275ca0426ae854024ccd54089d728109aba1500833501e02935742a00e666aa044054eb4d5d0a8031919191999ab9a3370e6aae75400920002332212330010030023232323333573466e1cd55cea8012400046644246600200600466a068eb4d5d0a801181a9aba135744a004464c6406e66ae700e80dc0d44d55cf280089baa00135742a0046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40d1d69aba150023035357426ae8940088c98c80dccd5ce01d01b81a89aab9e5001137540026ae84d5d1280111931901999ab9c036033031135573ca00226ea8004d5d0a80299a80f3ae35742a008666aa04404c40026ae85400cccd54089d710009aba150023028357426ae8940088c98c80bccd5ce01901781689aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226aae7940044dd50009aba150023018357426ae8940088c98c8084cd5ce01201080f881009a8072490350543500135573ca00226ea80048d400488cccd40048c98c8078cd5ce249024c680001e200123263201e3357389201024c680001e23263201e3357389201024c680001e3200135501f2211222533500110022213300500233355300712001005004001233002500e0013200135501d222533500110022213500222330073330080020060010033200135501c22225335001100222135002225335333573466e1c005200002001f133300800700600313330080073350121233300100800300200600322333573466e3c008004064060c8004d540688844894cd400454034884cd4038c010008cd54c01848004010004c8004d54064884894cd4ccd5cd19b88001480000640604d40152401035054360015335002135005490103505437002215335333573466e1c00d200001b01a10021335300612001001337020069001091931900999ab9c0010131232230023758002640026aa030446666aae7c004940288cd4024c010d5d080118019aba2002014232323333573466e1cd55cea8012400046644246600200600460186ae854008c014d5d09aba2500223263201433573802e02802426aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea80124000466442466002006004602a6ae854008cd403c050d5d09aba2500223263201933573803803202e26aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900d99ab9c01e01b019018017135573aa00226ea8004d5d0a80119a805bae357426ae8940088c98c8054cd5ce00c00a80989aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405488c8cccd55cf80112804119a80399aa80c18031aab9d5002300535573ca00460086ae8800c0484d5d080088910010910911980080200189119191999ab9a3370ea0029000119091180100198029aba135573ca00646666ae68cdc3a801240044244002464c6402066ae7004c0400380344d55cea80089baa001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402066ae7004c04003803403002c4d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401866ae7003c0300284d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200a33573801a01401026ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201333573802c02602202001e01c01a01801626aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900619ab9c00f00c00a009135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c8024cd5ce00600480380309aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900519ab9c00d00a008007006135573aa00226ea80048c8cccd5cd19b87500148008801c8cccd5cd19b87500248000801c8c98c8018cd5ce00480300200189aab9d37540029309000891001091000a490350543100235001222335500500300111221233001003002112323001001223300330020020013335122251333512223351223300230044891cd020c8d6fc555285309236cf6f99ef1765a8f641946be6f205cdd9e70050072212330010030022001212230020032122300100320011212230020031122001120011"


// NFT Script
const nftScript: PlutusScript = {
    code: nftScriptSerial,
    version: 'V2',
  };

// UtilityScript
const utilityScript: PlutusScript = {
    code: utilitySerial,
    version: 'V2',
  };

interface Props {}

const LockMint: NextComponentType<NextPageContext, {}, Props> = (
    props: Props
  ) => {

    const [walletApi, setWalletApi] = useState<any>();
    const [allUtxos, setUtxos]      = useState<any>();

    const fullTx = async () => {
        // connect to a wallet
        const wallet = await BrowserWallet.enable('nami');
        console.log(wallet, 'Here is the wallet.')
        const usedAddr = await wallet.getChangeAddress()
        const utxos = await wallet.getUtxos();
        console.log(utxos, 'Here utxoss.')
        if (wallet && utxos && usedAddr) {
            setWalletApi(wallet)
            setUtxos(utxos)
            console.log(usedAddr, 'Here address')
            const forgingScript = ForgeScript.withOneSignature(usedAddr);
            console.log(redeemer, redeemerStructure, 'redeemersss')
            const tx = new Transaction({ initiator: wallet })
            .sendLovelace(
                {
                address: lockScriptAddress,
                datum: {
                    value: datumConstructor
                },
                },
                '50000000'
            )
            .mintAsset(forgingScript, nftAsset)
            .mintAsset(forgingScript, utilityToken)
            const unsignedTx = await tx.build();
            const signedTx = await wallet.signTx(unsignedTx);
            const txHash = await wallet.submitTx(signedTx);
            console.log(txHash)


        } else {
            alert('Wrong wallet instance.')
        }
  }

  return (
    <div className="grid">
        <Button theme="translucent" type="button" text="Lock funds & Mint Tokens" onClick={fullTx}></Button>
    </div>
  )
  }

export default LockMint;


// const fullTx = async () => {
//   // connect to a wallet
//   const wallet = await BrowserWallet.enable('nami');
//   console.log(wallet, 'Here is the wallet.')
//   const utxos = await wallet.getUtxos();
//   console.log(utxos, 'Here utxoss.')
//   if (wallet && utxos) {
//       setWalletApi(wallet)
//       setUtxos(utxos)
//       console.log(redeemer, redeemerStructure, 'redeemersss')
//       const tx = new Transaction({ initiator: wallet })
//       .sendLovelace(
//           {
//           address: lockScriptAddress,
//           datum: {
//               value: datumConstructor
//           },
//           },
//           '100000000'
//       )
//       .mintAsset(nftScript, nftAsset, redeemer)
//       // Due to CSL issues from MeshSDK minting assets from multiple policy scripts is not possible at the moment
//       // That's why we will use FOrgeScript from mesh instead and we will not interact with my own contracts.
//       .mintAsset(utilityScript, utilityToken, redeemerTwo)
//       const unsignedTx = await tx.build();
//       const signedTx = await wallet.signTx(unsignedTx);
//       const txHash = await wallet.submitTx(signedTx);
//       console.log(txHash)


//   } else {
//       alert('Wrong wallet instance.')
//   }
// }